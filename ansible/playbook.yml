- hosts: servers
  become: yes
  vars:
    admin_user: kou
    webhook_mailer_user: mailer
    webhook_mailer_gems_force_update: true
    github_event_watcher_user: watcher
    github_event_watcher_gems_force_update: true
    ruby_api_version: 3.1.0
    passenger_version: 6.0.23
  tasks:
    # Base
    - name: Install base packages
      apt:
        name:
          - acpid
          - apt-listchanges
          - apt-transport-https
          - git
          - lv
          - ruby
          - unattended-upgrades
          - vim
          - zsh
    - name: Use VIM as the default editor
      command: update-alternatives --set editor /usr/bin/vim.basic
    - name: Use e-mail for apt-listchanges
      lineinfile:
        path: /etc/apt/listchanges.conf
        regexp: "^frontend="
        line: "frontend=mail"
    - name: Reboot automatically when package upgrade requires restart
      lineinfile:
        path: /etc/apt/apt.conf.d/50unattended-upgrades
        regexp: "^(//)?Unattended-Upgrade::Automatic-Reboot "
        line: "Unattended-Upgrade::Automatic-Reboot \"true\";"
    - name: Send notification when packages upgraded automatically
      lineinfile:
        path: /etc/apt/apt.conf.d/50unattended-upgrades
        regexp: "^(//)?Unattended-Upgrade::Mail "
        line: "Unattended-Upgrade::Mail \"root\";"
    - name: "sudo: NOPASSWD"
      copy:
        src: etc/sudoers.d/sudo-nopasswd
        dest: /etc/sudoers.d/sudo-nopasswd
        mode: 0400
    - name: Install Groonga APT repository
      apt:
        deb: https://packages.groonga.org/debian/groonga-apt-source-latest-bookworm.deb
    - name: Install Bundler and default gems
      gem:
        name: "{{ item }}"
        user_install: no
        state: latest
      with_items:
        - base64
        - bundler

    # Set hostname
    - name: Set hostname
      copy:
        content: "{{ inventory_hostname }}"
        dest: /etc/hostname
      notify:
        - Apply hostname

    # Webhook mailer
    - name: Create user for Webhook mailer
      user:
        name: "{{ webhook_mailer_user }}"
    - name: Put ~{{ webhook_mailer_user }}/.forward
      copy:
        content: "root"
        dest: ~{{ webhook_mailer_user }}/.forward
        owner: "{{ webhook_mailer_user }}"
        group: "{{ webhook_mailer_user }}"
    - name: Create directories
      file:
        path: ~{{ webhook_mailer_user }}/{{ item }}
        state: directory
        owner: "{{ webhook_mailer_user }}"
        group: "{{ webhook_mailer_user }}"
      with_items:
        - bin/
        - decomposer/
        - .config/
        - .config/git/
        - webhook-mailer/
        - webhook-mailer/public/
        - webhook-mailer/tmp/
    - name: Put configuration files
      copy:
        src: home/{{ webhook_mailer_user }}/{{ item }}
        dest: ~{{ webhook_mailer_user }}/{{ item }}
        owner: "{{ webhook_mailer_user }}"
        group: "{{ webhook_mailer_user }}"
      with_items:
        - bin/chupa-text
        - bin/gc-mirrors.sh
        - .config/git/attributes
        - .config/git/config
        - decomposer/Gemfile
        - webhook-mailer/config.yaml
        - webhook-mailer/Gemfile
        - webhook-mailer/config.ru
      register: webhook_mailer_files
    - name: Make executable
      file:
        path: ~{{ webhook_mailer_user }}/{{ item }}
        mode: 0755
      with_items:
        - bin/chupa-text
        - bin/gc-mirrors.sh
      when: webhook_mailer_files.changed
    - name: Install packages for Webhook mailer
      apt:
        name: "{{ item }}"
      with_items:
        - gcc
        - libffi-dev
        - libgirepository1.0-dev
        - libgroonga-dev
        - libpoppler-glib-dev
        - libreoffice
        - make
        - ruby-dev
    - name: Remove Gemfile.lock
      file:
        path: ~{{ webhook_mailer_user }}/{{ item }}/Gemfile.lock
        state: absent
      with_items:
        - decomposer
        - webhook-mailer
      when: webhook_mailer_gems_force_update or
            webhook_mailer_files.changed
    - name: Update gems
      become_user: "{{ webhook_mailer_user }}"
      shell: |
        bundle config bin bin/
        bundle config path vendor/bundle
        bundle install
      args:
        chdir: ~{{ webhook_mailer_user }}/{{ item }}/
      with_items:
        - decomposer
        - webhook-mailer
      notify:
        - Restart Webhook mailer
      when: webhook_mailer_gems_force_update or
            webhook_mailer_files.changed

    # GitHub event watcher
    - name: Create user for GitHub event watcher
      user:
        name: "{{ github_event_watcher_user }}"
    - name: Put ~{{ github_event_watcher_user }}/.forward
      copy:
        content: "root"
        dest: "~{{ github_event_watcher_user }}/.forward"
        owner: "{{ github_event_watcher_user }}"
        group: "{{ github_event_watcher_user }}"
    - name: Create directories
      file:
        path: "~{{ github_event_watcher_user }}/{{ item }}"
        state: directory
        owner: "{{ github_event_watcher_user }}"
        group: "{{ github_event_watcher_user }}"
      with_items:
        - github-event-watcher/
    - name: Put configuration files
      copy:
        src: home/github-event-watcher/github-event-watcher/{{ item }}
        dest: "~{{ github_event_watcher_user }}/github-event-watcher/{{ item }}"
        owner: "{{ github_event_watcher_user }}"
        group: "{{ github_event_watcher_user }}"
      with_items:
        - config.yaml
        - Gemfile
      register: github_event_watcher_config_files
    - name: Remove Gemfile.lock
      file:
        path: "~{{github_event_watcher_user }}/github-event-watcher/Gemfile.lock"
        state: absent
      when: github_event_watcher_gems_force_update or
            github_event_watcher_config_files.changed
    - name: Update gems
      become_user: "{{ github_event_watcher_user }}"
      shell: |
        bundle config bin bin
        bundle config path vendor/bundle
        bundle install
      args:
        chdir: ~{{ github_event_watcher_user }}/github-event-watcher/
      notify:
        - Restart GitHub event watcher
      when: github_event_watcher_gems_force_update or
            github_event_watcher_config_files.changed
    - name: Put logrotate configuration
      template:
        src: etc/logrotate.d/github-event-watcher
        dest: /etc/logrotate.d/github-event-watcher
    - name: Install .service
      template:
        src: lib/systemd/system/github-event-watcher.service
        dest: /lib/systemd/system/github-event-watcher.service
      notify:
        - Reload systemd
        - Restart GitHub event watcher

    # Apache
    - name: Install Apache and related packages
      apt: name={{ item }}
      with_items:
        - apache2
        - apache2-dev
        - libapr1-dev
        - libaprutil1-dev
        - libcurl4-openssl-dev
        - libssl-dev
    - name: Install Passenger
      gem:
        name: passenger
        version: "{{ passenger_version }}"
        force: yes
        user_install: no
      register: passenger
    - name: Build Passenger
      command: passenger-install-apache2-module --languages ruby --auto
      when: passenger.changed
    - name: Put Passenger configuration files
      template:
        src: etc/apache2/mods-available/{{ item }}
        dest: /etc/apache2/mods-available/{{ item }}
      with_items:
        - passenger.conf
        - passenger.load
      register: passenger_config_files
    - name: Enable Passenger
      command: a2enmod passenger
      when: passenger_config_files.changed
    - name: Enable modules
      command: a2enmod {{ item }}
      with_items:
        - ssl
      notify:
        - Restart Apache
    - name: Put Apache configuration file
      template:
        src: etc/apache2/sites-available/{{ item }}
        dest: /etc/apache2/sites-available/{{ item }}
      with_items:
        - 000-default.conf
        - www.commit-email.info.conf
        - webhook.commit-email.info.conf
        - web-hooks-receiver.commit-email.info.conf
      register: apache_config_files
    - name: Put www.commit-email.info content
      copy:
        src: var/www/html/{{ item }}
        dest: /var/www/html/{{ item }}
      with_items:
        - index.html
        - style.css
    - name: Enable our Apache configurations
      command: a2ensite {{ item }}
      with_items:
        - 000-default
        - www.commit-email.info
        - webhook.commit-email.info
        - web-hooks-receiver.commit-email.info
      notify:
        - Restart Apache
      when: apache_config_files.changed

    # Let's encrypt
    - name: Install certbot
      apt:
        name: certbot
    - name: "www: Check Let's Encrypt certificate"
      stat:
        path: /etc/letsencrypt/live/www.commit-email.info/fullchain.pem
      register: www_certificate
    - name: "webhook: Check Let's Encrypt certificate"
      stat:
        path: /etc/letsencrypt/live/webhook.commit-email.info/fullchain.pem
      register: webhook_certificate
    - name: "@: Check Let's Encrypt certificate"
      stat:
        path: /etc/letsencrypt/live/commit-email.info/fullchain.pem
      register: domain_certificate
    - name: Check Apache is installed
      command: systemctl status apache2
      register: apache2_installed
      ignore_errors: yes
    - name: "Stop Apache before initializing Let's Encrypt certificate"
      service:
        name: apache2
        state: stopped
      when: apache2_installed.rc == 0 and
            ((not www_certificate.stat.exists) or
             (not webhook_certificate.stat.exists) or
             (not domain_certificate.stat.exists))
      notify:
        - Restart Apache
    - name: "www: Initialize Let's Encrypt certificate"
      shell: |
        certbot certonly \
          --standalone \
          --non-interactive \
          --agree-tos \
          --email webmaster@commit-email.info \
          --domain www.commit-email.info
      when: not www_certificate.stat.exists
    - name: "webhook: Initialize Let's Encrypt certificate"
      shell: |
        certbot certonly \
          --standalone \
          --non-interactive \
          --agree-tos \
          --email webmaster@commit-email.info \
          --domain webhook.commit-email.info
      when: not webhook_certificate.stat.exists
    - name: "@: Initialize Let's Encrypt certificate"
      shell: |
        certbot certonly \
          --standalone \
          --non-interactive \
          --agree-tos \
          --email webmaster@commit-email.info \
          --domain commit-email.info
      when: not domain_certificate.stat.exists
    - name: "Put Let's Encrypt update script"
      copy:
        src: etc/letsencrypt/renewal-hooks/{{ item }}
        dest: /etc/letsencrypt/renewal-hooks/{{ item }}
        mode: 0700
      with_items:
        - pre/stop-apache2
        - pre/stop-postfix
        - post/start-apache2
        - post/start-postfix

    # QuickML
    - name: Install QuickML
      apt: name=quickml
    - name: Put QuickML configuration
      copy:
        src: etc/quickml/quickmlrc
        dest: /etc/quickml/quickmlrc
      notify:
        - Restart QuickML

    # Postfix
    - name: Install Postfix
      apt:
        name:
          - postfix
    - name: Set /etc/aliases
      template:
        src: etc/aliases
        dest: /etc/aliases
      notify:
        - Update /etc/aliases
    - name: Set /etc/mailname
      copy:
        content: "commit-email.info"
        dest: /etc/mailname
    - name: Put Postfix configuration
      copy:
        src: "{{ item }}"
        dest: /{{ item }}
      with_items:
        - etc/postfix/transport_maps
        - etc/postfix/main.cf
      notify:
        - Update /etc/postfix/transport_maps
        - Restart Postfix

    # milter manager
    # - name: Add GPG key for APT repository
    #   apt_key:
    #     url: https://packagecloud.io/milter-manager/repos/gpgkey
    - name: Add APT repository for milter manager
      apt_repository:
        repo: |
          deb [signed-by=/etc/apt/keyrings/milter-manager_repos-archive-keyring.gpg] https://packagecloud.io/milter-manager/repos/debian/ bookworm main
        filename: "milter-manager"
    - name: Install milters
      apt:
        name: "{{ item }}"
      with_items:
        - milter-manager
        - milter-greylist
        - opendkim
        - opendkim-tools
    - name: Add milter-manager user to groups for milters
      user:
        name: milter-manager
        append: yes
        groups:
          - greylist
          - postfix
          - opendkim
      notify:
        - Restart milter manager
    - name: "OpenDKIM: Domain"
      lineinfile:
        path: /etc/opendkim.conf
        regexp: "^#?Domain	"
        line: "Domain	commit-email.info"
      notify:
        - Restart OpenDKIM
    - name: "OpenDKIM: KeyFile"
      lineinfile:
        path: /etc/opendkim.conf
        regexp: "^#?KeyFile	"
        line: "KeyFile	/etc/dkimkeys/default.private"
      notify:
        - Restart OpenDKIM
    - name: "OpenDKIM: Selector"
      lineinfile:
        path: /etc/opendkim.conf
        regexp: "^#?Selector	"
        line: "Selector	default"
      notify:
        - Restart OpenDKIM
    - name: "OpenDKIM: Mode"
      lineinfile:
        path: /etc/opendkim.conf
        regexp: "^#?Mode	"
        line: "Mode	s"
      notify:
        - Restart OpenDKIM
    - name: "OpenDKIM: SubDomains"
      lineinfile:
        path: /etc/opendkim.conf
        regexp: "^#?SubDomains	"
        line: "SubDomains	yes"
      notify:
        - Restart OpenDKIM
    - name: Check whether DKIM sign key exists
      stat:
        path: /etc/dkimkeys/default.private
      register: dkim_sign_key
    - name: Generate DKIM sing key
      become_user: opendkim
      shell: |
        opendkim-genkey \
          --directory /etc/dkimkeys \
          --domain commit-email.info \
          --selector default \
          --subdomains
      when: not dkim_sign_key.stat.exists
    - name: Create milter manager directory
      file:
        path: /var/spool/postfix/milter-manager/
        state: directory
        owner: milter-manager
        group: postfix
        mode: 0750
    - name: Configure milter manager
      copy:
        src: "{{ item }}"
        dest: /{{ item }}
      with_items:
        - etc/default/milter-manager
      notify:
        - Restart milter manager

  handlers:
    - name: Apply hostname
      command: hostname --file /etc/hostname
    - name: Restart Webhook mailer
      file:
        path: /home/{{ webhook_mailer_user }}/webhook-mailer/tmp/restart.txt
        state: touch
        owner: "{{ webhook_mailer_user }}"
        group: "{{ webhook_mailer_user }}"
    - name: Reload systemd
      command: systemctl daemon-reload
    - name: Restart GitHub event watcher
      service:
        name: github-event-watcher
        state: restarted
    - name: Restart Apache
      service:
        name: apache2
        state: restarted
    - name: Restart QuickML
      service:
        name: quickml
        state: restarted
    - name: Update /etc/aliases
      command: postalias /etc/aliases
    - name: Update /etc/postfix/transport_maps
      command: postmap /etc/postfix/transport_maps
    - name: Restart Postfix
      service:
        name: postfix
        state: restarted
    - name: Restart OpenDKIM
      service:
        name: opendkim
        state: restarted
    - name: Restart milter manager
      service:
        name: milter-manager
        state: restarted
